#!/bin/sh
# Start/stop the chronos.
#
### BEGIN INIT INFO
# Provides:          chronos
# Required-Start:    $remote_fs $syslog $time
# Required-Stop:     $remote_fs $syslog $time
# Should-Start:      $network $named slapd autofs ypbind nscd nslcd
# Should-Stop:       $network $named slapd autofs ypbind nscd nslcd
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: chronos is airbnb's replacement for cron.
# Description:       chronos is a distributed and fault-tolerant scheduler
#                    which runs on top of mesos. It's a framework and supports
#                    custom mesos executors as well as the default command
#                    executor. Thus by default, Chronos executes sh (on most
#                    systems bash) scripts. Chronos can be used to interact
#                    with systems such as Hadoop (incl. EMR), even if the
#                    mesos slaves on which execution happens do not have
#                    Hadoop installed. Included wrapper scripts allow
#                    transfering files and executing them on a remote machine
#                    in the background and using asynchronous callbacks to
#                    notify Chronos of job completion or failures.
#                    See https://github.com/airbnb/chronos for more info.
### END INIT INFO

PATH=/bin:/usr/bin:/sbin:/usr/sbin
DESC="chronos daemon"
NAME=chronos
PIDFILE=/var/run/${NAME}.pid
SCRIPTNAME=$0
LOG_DIR="/var/log/chronos"
CHRONOS_HOME=/opt/chronos
MESOS_HOME=/opt/mesos

. /etc/default/chronos

DAEMON="${CHRONOS_HOME}/bin/chronos"
if [ "$(id -u)" -ne "0" ]; then
  echo "you must be root to start ${DESC}"
  exit 1
fi

. /lib/lsb/init-functions

case "$1" in
  start)
    log_daemon_msg "Starting periodic command scheduler" "chronos"
    echo "[$(date)] Starting chronos: $DAEMON" >> $LOG_DIR/chronos.log
    start-stop-daemon --start --quiet --background \
        --pidfile $PIDFILE --make-pidfile \
        --startas /bin/bash -- -c "exec $DAEMON ${EXTRA_OPTS} >> $LOG_DIR/chronos.log 2>&1"
    log_end_msg $?
  ;;
  stop)
    log_daemon_msg "Stopping periodic command scheduler" "${NAME}"
    killproc -p $PIDFILE $DAEMON
    RETVAL=$?
    [ $RETVAL -eq 0 ] && [ -e "$PIDFILE" ] && rm -f $PIDFILE
    log_end_msg $RETVAL
  ;;
  restart)
    log_daemon_msg "Restarting periodic command scheduler" "${NAME}"
    $0 stop
    sleep 5
    $0 start
  ;;
  reload|force-reload)
    log_daemon_msg "Reloading configuration files for periodic command scheduler" "${NAME}"
    # cron reloads automatically
    log_end_msg 0
  ;;
  status)
    status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit $?
    ;;
  *)
    log_action_msg "Usage: ${SCRIPTNAME} {start|stop|status|restart|reload|force-reload}"
    exit 2
  ;;
esac
exit 0

